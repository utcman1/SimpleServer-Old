1. connector
	클라로 동작하는 경우.
	외부 서비스에 접속해서 무언가를 하는 경우. ex) 결제, 인증, 푸시, ...
	성능 테스트를 위한 테스트 클라로도 동작.

	각 connector별로 독립된 session pool을 가져야 한다.
	서비스에 사용되는 connector의 경우 pool 크기가 크지 않아도 된다.

	성능 테스트를 위한 test client의 경우 서버용 acceptor의 session pool 크기와 동일한 크기의 session pool이 필요하다.

	connector의 경우 개발 초기에서는 test client 만을 고려하고 작성해도 된다.
	결제, 인증, 푸시 등의 기능은 당장 고려하지 않아도 된다.
	=> 현재는 test client 용으로 사용되는 것만 고려한다.

	=> 완료



2. session handler
	onError / onRecv / onSend / onAccept / 	onConnect
	핸들러 호출 위치는 session이지만 핸들러의 내용은 acceptor / connector에 있다.
	CRTP 패턴으로 session<handler> 형태로 사용한다.

	=> 완료



3. perf counter
	acceptor / connector 별로 독립적으로 관리한다.
	=> session pool에 통합한다.

	=> 완료



4. service와 acceptor / connector 관계
	service에서 acceptor / connector를 포함하도록 설계하는 경우
	service클래스를 정의하기가 매우 어렵다.
	service 클래스와 acceptor / connector는 독립적으로 설계하고,
	app code에서 service 클래서 정의 -> acceptor / connector 정의 순서로 사용하자.

	=> 완료
